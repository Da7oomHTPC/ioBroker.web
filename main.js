/* jshint -W097 */// jshint strict:false
/*jslint node: true */
'use strict';

var express = require('express');
var fs =      require('fs');
//var Stream =  require('stream');
var utils =   require(__dirname + '/lib/utils'); // Get common adapter utils
var LE =      require(utils.controllerDir + '/lib/letsencrypt.js');

var session;// =           require('express-session');
var cookieParser;// =      require('cookie-parser');
var bodyParser;// =        require('body-parser');
var AdapterStore;// =      require(__dirname + '/../../lib/session.js')(session);
var passportSocketIo;// =  require(__dirname + "/lib/passport.socketio.js");
var password;// =          require(__dirname + '/../../lib/password.js');
var passport;// =          require('passport');
var LocalStrategy;// =     require('passport-local').Strategy;
var flash;// =             require('connect-flash'); // TODO report error to user

var webServer =  null;
var store =      null;
var secret =     'Zgfr56gFe87jJOM'; // Will be generated by first start
var socketUrl =  '';
var cache =      {}; // cached web files
var ownSocket =  false;
var lang =       'en';
var extensions = {};

var systemDictionary = {
    'Directories': {'en': 'Directories', 'de': 'Verzeichnise', 'ru': 'Пути'},
    'your are lost': {
        'en': 'It seems to be you are lost. Here are some files, that you can open:',
        'de': 'Sieht so aus, als ob du verlaufen bist. Hier sind die Pfade, wohin man gehen kann:',
        'ru': 'Похоже, что кто-то потерялся. Вот пути по которым можно пойти:'
    }
};

var adapter = new utils.Adapter({
    name: 'web',
    objectChange: function (id, obj) {
        if (obj && obj.common.webExtension &&
            (extensions[id.substring('system.adapter.'.length)] ||
             obj.native.webInstance === '*' ||
             obj.native.webInstance === 'adapter.namespace'
            )
        ) {
            adapter.setForeignState('system.adapter.' + adapter.namespace + '.alive', false, true, function () {
                process.exit(-100);
            });
            return;
        }

        if (!ownSocket && id === adapter.config.socketio) {
            if (obj && obj.common && obj.common.enabled && obj.native) {
                socketUrl = ':' + obj.native.port;
            } else {
                socketUrl = '';
            }
        }
        if (webServer.io) webServer.io.publishAll('objectChange', id, obj);
        if (webServer.api && adapter.config.auth) webServer.api.objectChange(id, obj);
        if (id === 'system.config') {
            lang = obj && obj.common && obj.common.language ? obj.common.language : 'en';
        }

        // inform extensions
        for (var e = 0; e < extensions.length; e++) {
            try {
                if (extensions[e].obj && extensions[e].obj.objectChange) {
                    extensions[e].obj.objectChange(id, obj);
                }
            } catch (err) {
                adapter.log.error('Cannot call objectChange for "' + e + '": ' + err);
            }
        }
    },
    stateChange: function (id, state) {
        if (webServer.io) webServer.io.publishAll('stateChange', id, state);
    },
    unload: function (callback) {
        try {
            adapter.log.info('terminating http' + (webServer.settings.secure ? 's' : '') + ' server on port ' + webServer.settings.port);
            webServer.server.close();
            adapter.log.info('terminated http' + (webServer.settings.secure ? 's' : '') + ' server on port ' + webServer.settings.port);

            callback();
        } catch (e) {
            callback();
        }
    },
    ready: function () {
        // Generate secret for session manager
        adapter.getForeignObject('system.config', function (err, obj) {
            if (!err && obj) {
                if (!obj.native || !obj.native.secret) {
                    obj.native = obj.native || {};
                    require('crypto').randomBytes(24, function (ex, buf) {
                        secret = buf.toString('hex');
                        adapter.extendForeignObject('system.config', {native: {secret: secret}});
                        main();
                    });
                } else {
                    secret = obj.native.secret;
                    main();
                }
            } else {
                adapter.logger.error('Cannot find object system.config');
            }
        });

        // information about connected socket.io adapter
        if (adapter.config.socketio && adapter.config.socketio.match(/^system\.adapter\./)) {
            adapter.getForeignObject(adapter.config.socketio, function (err, obj) {
                if (obj && obj.common && obj.common.enabled && obj.native) socketUrl = ':' + obj.native.port;
            });
            // Listen for changes
            adapter.subscribeForeignObjects(adapter.config.socketio);
        } else {
            socketUrl = adapter.config.socketio;
            ownSocket = (socketUrl !== 'none');
        }

        // Read language
        adapter.getForeignObject('system.config', function (err, data) {
            if (data && data.common) lang = data.common.language || 'en';
        });
    }
});

function getExtensions(callback) {
    adapter.objects.getObjectView('system', 'instance', null, function (err, doc) {
        if (err) {
            if (callback) callback (err, []);
        } else {
            if (doc.rows.length === 0) {
                if (callback) callback (null, []);
            } else {
                var res = [];
                for (var i = 0; i < doc.rows.length; i++) {
                    var instance = doc.rows[i].value;
                    if (instance.common.enabled &&
                        instance.common.webExtension &&
                        (instance.native.webInstance === adapter.namespace || instance.native.webInstance === '*')) {
                        res.push(doc.rows[i].value);
                    }
                }
                if (callback) callback (null, res);
            }
        }
    });
}

function main() {
    getExtensions(function (err, ext) {
        if (err) adapter.log.error('Cannot read extensions: ' + err);
        if (ext) {
            for (var e = 0; e < ext.length; e++) {
                var instance = ext[e]._id.substring('system.adapter.'.length);
                var name = instance.split('.')[0];

                extensions[instance] = {
                    path: name + '/' + ext[e].common.webExtension,
                    config: ext[e]
                };
            }
        }

        if (adapter.config.secure) {
            // Load certificates
            adapter.getCertificates(function (err, certificates, leConfig) {
                adapter.config.certificates = certificates;
                adapter.config.leConfig     = leConfig;
                webServer = initWebServer(adapter.config);
            });
        } else {
            webServer = initWebServer(adapter.config);
        }
        // monitor extensions
        adapter.subscribeForeignObjects('system.adapter.*');
    });
}

function readDirs(dirs, cb, result) {
    result = result || [];
    if (!dirs || !dirs.length) {
        return cb && cb(result);
    }
    var dir = dirs.shift();
    adapter.readDir(dir, '', function (err, files) {
        if (!err && files && files.length) {
            for (var f = 0; f < files.length; f++) {
                if (files[f].file.match(/\.html$/)) {
                    result.push(dir + '/' + files[f].file);
                }
            }
        }
        setTimeout(function () {
            readDirs(dirs, cb, result);
        }, 0);
    });
}

//settings: {
//    "port":   8080,
//    "auth":   false,
//    "secure": false,
//    "bind":   "0.0.0.0", // "::"
//    "cache":  false
//}
function initWebServer(settings) {

    var server = {
        app:       null,
        server:    null,
        io:        null,
        settings:  settings
    };
    adapter.subscribeForeignObjects('system.config');

    settings.ttl = parseInt(settings.ttl, 10) || 3600;
    if (!settings.whiteListEnabled && settings.whiteListSettings) delete settings.whiteListSettings;

    settings.defaultUser = settings.defaultUser || 'system.user.admin';
    if (!settings.defaultUser.match(/^system\.user\./)) settings.defaultUser = 'system.user.' + settings.defaultUser;

    if (settings.port) {
        if (settings.secure) {
            if (!settings.certificates) {
                return null;
            }
        }
        server.app = express();
        if (settings.auth) {
            session =          require('express-session');
            cookieParser =     require('cookie-parser');
            bodyParser =       require('body-parser');
            AdapterStore =     require(utils.controllerDir + '/lib/session.js')(session, settings.ttl);
            passportSocketIo = require('passport.socketio');
            password =         require(utils.controllerDir + '/lib/password.js');
            passport =         require('passport');
            LocalStrategy =    require('passport-local').Strategy;
            flash =            require('connect-flash'); // TODO report error to user

            store = new AdapterStore({adapter: adapter});

            passport.use(new LocalStrategy(
                function (username, password, done) {
                    adapter.checkPassword(username, password, function (res) {
                        if (res) {
                            return done(null, username);
                        } else {
                            return done(null, false);
                        }
                    });
                }
            ));
            passport.serializeUser(function (user, done) {
                done(null, user);
            });

            passport.deserializeUser(function (user, done) {
                done(null, user);
            });

            server.app.use(cookieParser());
            server.app.use(bodyParser.urlencoded({
                extended: true
            }));
            server.app.use(bodyParser.json());
            server.app.use(bodyParser.text());
            server.app.use(session({
                secret:            secret,
                saveUninitialized: true,
                resave:            true,
                store:             store
            }));
            server.app.use(passport.initialize());
            server.app.use(passport.session());
            server.app.use(flash());

            var autoLogonOrRedirectToLogin = function (req, res, next, redirect) {
                if (!settings.whiteListSettings) {
					if (/\.js$/.test(req.originalUrl)) {
						// return always valid js file for js, because if cache is active it leads to errors
						var parts = req.originalUrl.split('/');
						// if request for web/lib, ignore it, because no redirect information
						if (parts[1] === 'lib') return res.status(200).send('');
						return res.status(200).send('document.location="/login/index.html?href=/' + parts[1] + '/";');
					} else {
						return res.redirect(redirect);
					}
				}
                var remoteIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
                var whiteListIp = server.io.getWhiteListIpForAddress(remoteIp, settings.whiteListSettings);
				adapter.log.info('whiteListIp ' + whiteListIp);
                if (!whiteListIp || settings.whiteListSettings[whiteListIp].user === 'auth') {
					if (/\.js$/.test(req.originalUrl)) {
						// return always valid js file for js, because if cache is active it leads to errors
						var parts = req.originalUrl.split('/');
						if (parts[1] === 'lib') return res.status(200).send('');
						return res.status(200).send('document.location="/login/index.html?href=/' + parts[1] + '/";');
					} else {
						return res.redirect(redirect);
					}
				}
                req.logIn(settings.whiteListSettings[whiteListIp].user, function (err) {
					return next(err);
                });
            };

            server.app.post('/login', function (req, res) {
                var redirect = '/';
                var parts;
                if (req.body.origin) {
                    parts = req.body.origin.split('=');
                    if (parts[1]) redirect = decodeURIComponent(parts[1]);
                }
                if (req.body && req.body.username && settings.addUserName && redirect.indexOf('?') === -1) {
                    parts = redirect.split('#');
                    parts[0] += '?' + req.body.username;
                    redirect = parts.join('#');
                }
                var authenticate = passport.authenticate('local', {
                    successRedirect: redirect,
                    failureRedirect: '/login/index.html' + req.body.origin + (req.body.origin ? '&error' : '?error'),
                    failureFlash: 'Invalid username or password.'
                })(req, res);
            });

            server.app.get('/logout', function (req, res) {
                req.logout();
                res.redirect('/login/index.html');
            });

            // route middleware to make sure a user is logged in
            server.app.use(function (req, res, next) {
				// if cache.manifes got back not 200 it makes an error
                if (req.isAuthenticated() ||
                    /cache\.manifest$/.test(req.originalUrl) ||
                    /^\/login\//.test(req.originalUrl) ||
                    /\.ico$/.test(req.originalUrl)
                ) return next();
				
				autoLogonOrRedirectToLogin(req, res, next, '/login/index.html?href=' + encodeURIComponent(req.originalUrl));
            });
        } else {
            server.app.get('/login', function (req, res) {
                res.redirect('/');
            });
            server.app.get('/logout', function (req, res) {
                res.redirect('/');
            });
        }

        // Init read from states
        server.app.get('/state/*', function (req, res) {
            try {
                var fileName = req.url.split('/', 3)[2].split('?', 2);
                adapter.getBinaryState(fileName[0], {user: req.user ? 'system.user.' + req.user : settings.defaultUser}, function (err, obj) {
                    if (!err && obj !== null && obj !== undefined) {
                        res.set('Content-Type', 'text/plain');
                        res.status(200).send(obj);
                    } else {
                        res.status(404).send('404 Not found. File ' + fileName[0] + ' not found');
                    }
                });
            } catch (e) {
                res.status(500).send('500. Error' + e);
            }
        });

        server.app.get('*/_socket/info.js', function (req, res) {
            res.set('Content-Type', 'application/javascript');
            res.status(200).send('var socketUrl = "' + socketUrl + '"; var socketSession = "' + '' + '"; sysLang = "' + lang + '"; socketForceWebSockets = ' + (settings.forceWebSockets ? 'true' : 'false') + ';');
        });

        // Enable CORS
        if (settings.socketio) {
            server.app.use(function (req, res, next) {
                res.header('Access-Control-Allow-Origin', '*');
                res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
                res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With, *');

                // intercept OPTIONS method
                if ('OPTIONS' === req.method) {
                    res.status(200).send(200);
                } else {
                    next();
                }
            });
        }

        var appOptions = {};
        if (settings.cache) appOptions.maxAge = 30758400000;

        server.server = LE.createServer(server.app, settings, settings.certificates, settings.leConfig, adapter.log);
        server.server.__server = server;
    } else {
        adapter.log.error('port missing');
        process.exit(1);
    }

    if (server.server) {
        adapter.getPort(settings.port, function (port) {
            if (port != settings.port && !settings.findNextPort) {
                adapter.log.error('port ' + settings.port + ' already in use');
                process.exit(1);
            }
            server.server.listen(port, (!settings.bind || settings.bind === '0.0.0.0') ? undefined : settings.bind || undefined);
            adapter.log.info('http' + (settings.secure ? 's' : '') + ' server listening on port ' + port);
        });
    }

    // activate extensions
    for (var e in extensions) {
        if (!extensions.hasOwnProperty(e)) continue;
        try {
            // for debug purposes try to load file in current directory "/lib/file.js" (elsewise node.js cannot debug it)
            var parts = extensions[e].path.split('/');
            parts.shift();
            var extAPI;
            if (fs.existsSync(__dirname + '/' + parts.join('/'))) {
                extAPI = require(__dirname + '/' + parts.join('/'));
            } else {
                extAPI = require(utils.appName + '.' + extensions[e].path);
            }

            extensions[e].obj = new extAPI(server.server, {secure: settings.secure, port: settings.port}, adapter, extensions[e].config, server.app);
            adapter.log.info('Connect extension "' + extensions[e].path + '"');
        } catch (err) {
            adapter.log.error('Cannot start extension "' + e + '": ' + err);
        }
    }

    // Activate integrated simple API
    if (settings.simpleapi) {
        var SimpleAPI = require(utils.appName + '.simple-api/lib/simpleapi.js');

        server.api = new SimpleAPI(server.server, {secure: settings.secure, port: settings.port}, adapter);
    }

    // Activate integrated socket
    if (ownSocket) {
        var IOSocket = require(utils.appName + '.socketio/lib/socket.js');
        var socketSettings = JSON.parse(JSON.stringify(settings));
        // Authentication checked by server itself
        socketSettings.auth             = false;
        socketSettings.secret           = secret;
        socketSettings.store            = store;
        socketSettings.ttl              = settings.ttl || 3600;
        socketSettings.forceWebSockets  = settings.forceWebSockets || false;
        server.io = new IOSocket(server.server, socketSettings, adapter);
    }

    if (server.app) {
        // deliver web files from objectDB
        server.app.use('/', function (req, res) {
            var url = decodeURI(req.url);

            if (server.api && server.api.checkRequest(url)) {
                server.api.restApi(req, res);
                return;
            }

            if (url === '/') {
                try {
                    // read all instances
                    adapter.objects.getObjectView('system', 'instance', {}, function (err, instances) {
                        adapter.objects.getObjectView('system', 'adapter', {}, function (err, adapters) {
                            var check = [];
                            var a;
                            for (a = 0; a < adapters.rows.length; a++) {
                                check.push(adapters.rows[a].id.substring('system.adapter.'.length));
                                check.push(adapters.rows[a].id.substring('system.adapter.'.length) + '.admin');
                            }
                            for (a = 0; a < instances.rows.length; a++) {
                                check.push(instances.rows[a].id.substring('system.adapter.'.length));
                            }
                            readDirs(check, function (dirs) {
                                var text = '<h2>' + systemDictionary['Directories'][lang] + '</h2><p>' + systemDictionary['your are lost'][lang] + '</p>';
                                dirs.sort();
                                for (var d = 0; d < dirs.length; d++) {
                                    if (dirs[d].indexOf('vis/') !== -1 || dirs[d].indexOf('mobile/') !== -1) {
                                        text += (text ? '<br>' : '') + '<a href="/' + dirs[d] + '"><b>' + dirs[d] + '</b></a>';
                                    } else {
                                        text += (text ? '<br>' : '') + '<a href="/' + dirs[d] + '">' + dirs[d] + '</a>';
                                    }
                                }
                                res.set('Content-Type', 'text/html');
                                res.status(200).send('<html><head><title>iobroker.web</title></head><body>' + text + '</body>');

                            });
                        });
                    });
                } catch (e) {
                    res.status(500).send('500. Error' + e);
                }
                return;
            }

            // add index.html
            url = url.replace(/\/($|\?|#)/, '/index.html$1');

            if (url.match(/^\/adapter\//)) {
                // add .admin to adapter name
                url = url.replace(/^\/adapter\/([a-zA-Z0-9-_]+)\//, '/$1.admin/');
            }

            if (url.match(/^\/lib\//)) {
                url = '/web' + url;
            }

            url = url.split('/');
            // Skip first /
            url.shift();
            // Get ID
            var id = url.shift();
            url = url.join('/');
            var pos = url.indexOf('?');
            var noFileCache;
            if (pos !== -1) {
                url = url.substring(0, pos);
                // disable file cache if request like /vis/files/picture.png?noCache
                noFileCache = true;
            }
            if (settings.cache && cache[id + '/' + url] && !noFileCache) {
                res.contentType(cache[id + '/' + url].mimeType);
                res.status(200).send(cache[id + '/' + url].buffer);
            } else {
                if (id === 'login' && url === 'index.html') {
                    var buffer = fs.readFileSync(__dirname + '/www/login/index.html');
                    if (buffer === null || buffer === undefined) {
                        res.contentType('text/html');
                        res.status(200).send('File ' + url + ' not found', 404);
                    } else {
                        // Store file in cache
                        if (settings.cache) {
                            cache[id + '/' + url] = {buffer: buffer.toString(), mimeType: 'text/html'};
                        }
                        res.contentType('text/html');
                        res.status(200).send(buffer.toString());
                    }

                } else {
                    adapter.readFile(id, url, {user: req.user ? 'system.user.' + req.user : settings.defaultUser, noFileCache: noFileCache}, function (err, buffer, mimeType) {
                        if (buffer === null || buffer === undefined || err) {
                            res.contentType('text/html');
                            res.status(404).send('File ' + url + ' not found: ' + err);
                        } else {
                            // Store file in cache
                            if (settings.cache) {
                                cache[id + '/' + url] = {buffer: buffer, mimeType: mimeType || 'text/javascript'};
                            }
                            res.contentType(mimeType || 'text/javascript');
                            res.status(200).send(buffer);
                        }
                    });
                }
            }
        });
    }

    if (server.server) {
        return server;
    } else {
        return null;
    }
}
